
mise en place du projet.

1. installation virtual env :
    pip install virtualenv ( permet d'installer virtualenv)

2. création d'un virtual env :
    virtualenv venv

3. activation du venv :
    source venv/bin/activate (sous linux / mac)
    aller dans le dossier venv/scripts puis taper activate (windows)

4. installer les requirements du fichier requirements.txt
    pip install -r requirements.txt




mise en place postgres django

1. récupérer le nom d'utilisateur et le mots de passe depuis postgres.

2. créer dans postgres une nouvelle base de donnée nommée "dbPostgres"

3. dans le projet django, ouvrir le fichier settings.py

4. dans ce fichier se trouve une catégorie database. remplacer les informations nom = dbPostgres, puis vos identifiants.

5. activer le venv (voir point mise en place du projet)

6. démarrer le projet django
     python manage.py runserver





Création de l'application et des modèles (rendez vous dans le dossier contenant manage.py)

1. Après avoir créer l'architecture principale du projet, il faut créer l'application, pour cela on utilise la commande:
    python manage.py startapp nomapplication (pas besoin de faire si elle existe)

2. Rd-vous dans le dossier nomapplication, ouvrez le fichier modèles et adapter le à votre choix. (pas besoin si déjà modifié)

3. modifier le fichier settings.py. dans la section installed_apps, rajouter 'reeduc'
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'reeduc',
]

4. Le fichier modèle créé, modifié, exectuer la commande :
 python manage.py makemigrations

5. Ensuite executer la commande:
  python manage.py migrate





ACTIVATION MATERIALIZE

attention pas oublier de faire l'install depuis requirement pour materialize-css

1.  modifier le fichier settings.py. dans la section installed_apps, rajouter 'materialize'






Ajout de données à la base de données (rendez vous dans le dossier contenant manage.py)
1. Executer: python manage.py loaddata .\fixtures\nomFichier.json
    (Il faut ajouter en premier le fichier Game.json, suivi de User.json et dernièrement le fichier Player.json
    Cela va vous ajouter l'utilisateur root avec mot de passe root à la base de données. Finalement ajouter PlayedGame.json.)


Créer les routes:
utiliser le fichier reeduc/url pour y créer les routes en fonction des noms des fichiers html contenus dans reeduc/templates


ajouter template :
dans le fichier settings.py, tout en haut, faire un import os puis taper :
SETTINGS_PATH = os.path.dirname(os.path.dirname(__file__))

ensuite dans la catégorie TEMPLATE, remplacé le DIRS par :
 'DIRS': [os.path.join(SETTINGS_PATH, 'template')],


//////////////////////////////IMPORTANT///////////////////////////////////
L'idée d'utiliser Graphos a été abandonné, on utiliser Chartit maintenant.
Cette app permet la création de graph, comme Graphos en soit, mais celle-ci est compatible
avec python3 alors que Graphos est jugé "a risques".

Installation de chartit:
   -    Rendez-vous dans ton environement virtuel et entrer la commande suivante: pip install django django_chartit
   -    Ajouter chartit au INSTALLED_APPS dans le fichier settings: 'chartit',
   -    Pour avoir un example, voir le fichier views.py et viem.html

Ou alors rd-vous à: http://www.idreammicro.com/post/django-chartit


///////////////////////////// IMPORTANT////////////////////////////////////
Nouvelle migration disponible. Pour pouvoir effectuer cette mise à jour sans problème:
    -   Rendez-vous sur PGAdmin, supprimer les données de la table played_game (pour cela view data et supprimer les données)
    -   Ensuite rendez-vous dans votre environnement virtuel et exécuter: python manage.py migrate
    -   Pour finir exécuter la commande: python manage.py loaddata .\fixtures\PlayedGame.json